{"ast":null,"code":"var _jsxFileName = \"/home/medow/ReactWorkSpace/coming-soon-preview/src/hoc/ErrorHandler/ErrorHandler.js\";\nimport React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\n\nconst errorHandler = WrappedComponent => {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        error: null\n      };\n\n      this.errorConfirmedHandler = () => {\n        this.setState({\n          error: null\n        });\n      };\n    }\n\n    componentWillMount() {\n      this.reqInterceptor = axios.interceptors.request.use(req => {\n        this.setState({\n          error: null\n        });\n        return req;\n      });\n      this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n        this.setState({\n          error: error\n        });\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.reqInterceptor);\n      axios.interceptors.response.eject(this.resInterceptor);\n    }\n\n    render() {\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.state.error,\n        modalClosed: this.errorConfirmedHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.state.error ? this.state.error.message : null), React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n};\n\nexport default errorHandler;","map":{"version":3,"sources":["/home/medow/ReactWorkSpace/coming-soon-preview/src/hoc/ErrorHandler/ErrorHandler.js"],"names":["React","Component","Aux","errorHandler","WrappedComponent","state","error","errorConfirmedHandler","setState","componentWillMount","reqInterceptor","axios","interceptors","request","use","req","resInterceptor","response","res","componentWillUnmount","eject","render","message","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,GAAP,MAAgB,YAAhB;;AAEA,MAAMC,YAAY,GAAKC,gBAAF,IAAuB;AAAA;;AACxC,iBAAO,cAAcH,SAAd,CAAwB;AAAA;AAAA;AAAA,WAE3BI,KAF2B,GAEnB;AACJC,QAAAA,KAAK,EAAE;AADH,OAFmB;;AAAA,WAqB3BC,qBArB2B,GAqBH,MAAM;AAC1B,aAAKC,QAAL,CAAe;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAAf;AACH,OAvB0B;AAAA;;AAM3BG,IAAAA,kBAAkB,GAAI;AAClB,WAAKC,cAAL,GAAsBC,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,GAAG,IAAI;AACzD,aAAKP,QAAL,CAAe;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAAf;AACA,eAAOS,GAAP;AACH,OAHqB,CAAtB;AAIA,WAAKC,cAAL,GAAsBL,KAAK,CAACC,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CAAiCI,GAAG,IAAIA,GAAxC,EAA6CZ,KAAK,IAAI;AACxE,aAAKE,QAAL,CAAe;AAAEF,UAAAA,KAAK,EAAEA;AAAT,SAAf;AACH,OAFqB,CAAtB;AAGH;;AAEDa,IAAAA,oBAAoB,GAAI;AACpBR,MAAAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAkC,KAAKV,cAAvC;AACAC,MAAAA,KAAK,CAACC,YAAN,CAAmBK,QAAnB,CAA4BG,KAA5B,CAAmC,KAAKJ,cAAxC;AACH;;AAODK,IAAAA,MAAM,GAAI;AACN,aACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWC,KADrB;AAEI,QAAA,WAAW,EAAE,KAAKC,qBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGK,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWC,KAAX,CAAiBgB,OAApC,GAA8C,IAHnD,CADJ,EAMI,oBAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANJ,CADJ;AASH;;AApC0B,GAA/B;AAsCH,CAvCD;;AAyCA,eAAepB,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\n\nconst errorHandler = ( WrappedComponent) => {\n    return class extends Component {\n\n        state = {\n            error: null\n        }\n\n        componentWillMount () {\n            this.reqInterceptor = axios.interceptors.request.use( req => {\n                this.setState( { error: null } );\n                return req;\n            } );\n            this.resInterceptor = axios.interceptors.response.use( res => res, error => {\n                this.setState( { error: error } );\n            } );\n        }\n\n        componentWillUnmount () {\n            axios.interceptors.request.eject( this.reqInterceptor );\n            axios.interceptors.response.eject( this.resInterceptor );\n        }\n\n        errorConfirmedHandler = () => {\n            this.setState( { error: null } );\n        }\n\n        \n        render () {\n            return (\n                <Aux>\n                    <Modal\n                        show={this.state.error}\n                        modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Aux>            );\n        }\n    }\n}\n\nexport default errorHandler;"]},"metadata":{},"sourceType":"module"}