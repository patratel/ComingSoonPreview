{"ast":null,"code":"\"use strict\";\n\n;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __importDefault(require(\"./lib/types\"));\n\nvar path_visitor_1 = __importDefault(require(\"./lib/path-visitor\"));\n\nvar equiv_1 = __importDefault(require(\"./lib/equiv\"));\n\nvar path_1 = __importDefault(require(\"./lib/path\"));\n\nvar node_path_1 = __importDefault(require(\"./lib/node-path\"));\n\nfunction default_1(defs) {\n  var fork = createFork();\n  var types = fork.use(types_1.default);\n  defs.forEach(fork.use);\n  types.finalize();\n  var PathVisitor = fork.use(path_visitor_1.default);\n  return {\n    Type: types.Type,\n    builtInTypes: types.builtInTypes,\n    namedTypes: types.namedTypes,\n    builders: types.builders,\n    defineMethod: types.defineMethod,\n    getFieldNames: types.getFieldNames,\n    getFieldValue: types.getFieldValue,\n    eachField: types.eachField,\n    someField: types.someField,\n    getSupertypeNames: types.getSupertypeNames,\n    getBuilderName: types.getBuilderName,\n    astNodesAreEquivalent: fork.use(equiv_1.default),\n    finalize: types.finalize,\n    Path: fork.use(path_1.default),\n    NodePath: fork.use(node_path_1.default),\n    PathVisitor: PathVisitor,\n    use: fork.use,\n    visit: PathVisitor.visit\n  };\n}\n\nexports.default = default_1;\n\nfunction createFork() {\n  var used = [];\n  var usedResult = [];\n\n  function use(plugin) {\n    var idx = used.indexOf(plugin);\n\n    if (idx === -1) {\n      idx = used.length;\n      used.push(plugin);\n      usedResult[idx] = plugin(fork);\n    }\n\n    return usedResult[idx];\n  }\n\n  var fork = {\n    use: use\n  };\n  return fork;\n}\n\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}