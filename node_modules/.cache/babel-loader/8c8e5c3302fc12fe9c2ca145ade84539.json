{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar crypto = require('crypto');\n\nvar Readable = require('readable-stream');\n\n;\n\nvar dataUriToBuffer = require('data-uri-to-buffer');\n\nvar NotModifiedError = require('./notmodified');\n\nvar debug = require('debug')('get-uri:data');\n/**\n * Module exports.\n */\n\n\nmodule.exports = get;\n/**\n * Returns a Readable stream from a \"data:\" URI.\n *\n * @api protected\n */\n\nfunction get(parsed, opts, fn) {\n  var uri = parsed.href;\n  var cache = opts.cache; // need to create a SHA1 hash of the URI string, for cacheability checks\n  // in future `getUri()` calls with the same data URI passed in.\n\n  var shasum = crypto.createHash('sha1');\n  shasum.update(uri);\n  var hash = shasum.digest('hex');\n  debug('generated SHA1 hash for \"data:\" URI: %o', hash); // check if the cache is the same \"data:\" URI that was previously passed in.\n\n  if (cache && cache.hash == hash) {\n    debug('got matching cache SHA1 hash: %o', hash);\n    fn(new NotModifiedError());\n  } else {\n    debug('creating Readable stream from \"data:\" URI buffer');\n    var buf = dataUriToBuffer(uri, opts);\n    var rs = new Readable();\n    rs._read = read(buf);\n    buf = null;\n    rs.hash = hash;\n    fn(null, rs);\n  }\n}\n/**\n * Function that returns a Readable `_read` function implementation.\n *\n * @api private\n */\n\n\nfunction read(buf) {\n  return function (n) {\n    this.push(buf);\n    this.push(null);\n    buf = null;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}