{"ast":null,"code":"'use strict';\n/**\n * Module exports.\n */\n\nmodule.exports = exports = PacProxyAgent;\n/**\n * Supported \"protocols\". Delegates out to the `get-uri` module.\n */\n\nvar getUri = require('get-uri');\n\nObject.defineProperty(exports, 'protocols', {\n  enumerable: true,\n  configurable: true,\n  get: function () {\n    return Object.keys(getUri.protocols);\n  }\n});\n/**\n * Module dependencies.\n */\n\nvar net = require('net');\n\nvar tls = require('tls');\n\nvar crypto = require('crypto');\n\nvar parse = require('url').parse;\n\nvar format = require('url').format;\n\nvar Agent = require('agent-base');\n\nvar HttpProxyAgent = require('http-proxy-agent');\n\nvar HttpsProxyAgent = require('https-proxy-agent');\n\nvar SocksProxyAgent = require('socks-proxy-agent');\n\nvar PacResolver = require('pac-resolver');\n\nvar getRawBody = require('raw-body');\n\nvar inherits = require('util').inherits;\n\nvar debug = require('debug')('pac-proxy-agent');\n/**\n * The `PacProxyAgent` class.\n *\n * A few different \"protocol\" modes are supported (supported protocols are\n * backed by the `get-uri` module):\n *\n *   - \"pac+data\", \"data\" - refers to an embedded \"data:\" URI\n *   - \"pac+file\", \"file\" - refers to a local file\n *   - \"pac+ftp\", \"ftp\" - refers to a file located on an FTP server\n *   - \"pac+http\", \"http\" - refers to an HTTP endpoint\n *   - \"pac+https\", \"https\" - refers to an HTTPS endpoint\n *\n * @api public\n */\n\n\nfunction PacProxyAgent(uri, opts) {\n  if (!(this instanceof PacProxyAgent)) return new PacProxyAgent(uri, opts); // was an options object passed in first?\n\n  if ('object' === typeof uri) {\n    opts = uri; // result of a url.parse() call?\n\n    if (opts.href) {\n      if (opts.path && !opts.pathname) {\n        opts.pathname = opts.path;\n      }\n\n      opts.slashes = true;\n      uri = format(opts);\n    } else {\n      uri = opts.uri;\n    }\n  }\n\n  if (!opts) opts = {};\n  if (!uri) throw new Error('a PAC file URI must be specified!');\n  debug('creating PacProxyAgent with URI %o and options %o', uri, opts);\n  Agent.call(this, connect); // strip the \"pac+\" prefix\n\n  this.uri = uri.replace(/^pac\\+/i, '');\n  this.sandbox = opts.sandbox;\n  this.proxy = opts;\n  this.cache = this._resolver = null;\n}\n\ninherits(PacProxyAgent, Agent);\n/**\n * Loads the PAC proxy file from the source if necessary, and returns\n * a generated `FindProxyForURL()` resolver function to use.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\nPacProxyAgent.prototype.loadResolver = function (fn) {\n  var self = this; // kick things off by attempting to (re)load the contents of the PAC file URI\n\n  this.loadPacFile(onpacfile); // loadPacFile() callback function\n\n  function onpacfile(err, code) {\n    if (err) {\n      if ('ENOTMODIFIED' == err.code) {\n        debug('got ENOTMODIFIED response, reusing previous proxy resolver');\n        fn(null, self._resolver);\n      } else {\n        fn(err);\n      }\n\n      return;\n    } // create a sha1 hash of the JS code\n\n\n    var hash = crypto.createHash('sha1').update(code).digest('hex');\n\n    if (self._resolver && self._resolver.hash == hash) {\n      debug('same sha1 hash for code - contents have not changed, reusing previous proxy resolver');\n      fn(null, self._resolver);\n      return;\n    } // cache the resolver\n\n\n    debug('creating new proxy resolver instance');\n    self._resolver = new PacResolver(code, {\n      filename: self.uri,\n      sandbox: self.sandbox\n    }); // store that sha1 hash on the resolver instance\n    // for future comparison purposes\n\n    self._resolver.hash = hash;\n    fn(null, self._resolver);\n  }\n};\n/**\n * Loads the contents of the PAC proxy file.\n *\n * @param {Function} fn callback function\n * @api private\n */\n\n\nPacProxyAgent.prototype.loadPacFile = function (fn) {\n  debug('loading PAC file: %o', this.uri);\n  var self = this; // delegate out to the `get-uri` module\n\n  var opts = {};\n\n  if (this.cache) {\n    opts.cache = this.cache;\n  }\n\n  getUri(this.uri, opts, onstream);\n\n  function onstream(err, rs) {\n    if (err) return fn(err);\n    debug('got stream.Readable instance for URI');\n    self.cache = rs;\n    getRawBody(rs, 'utf8', onbuffer);\n  }\n\n  function onbuffer(err, buf) {\n    if (err) return fn(err);\n    debug('read %o byte PAC file from URI', buf.length);\n    fn(null, buf);\n  }\n};\n/**\n * Called when the node-core HTTP client library is creating a new HTTP request.\n *\n * @api public\n */\n\n\nfunction connect(req, opts, fn) {\n  var url;\n  var host;\n  var self = this;\n  var secure = Boolean(opts.secureEndpoint); // first we need get a generated FindProxyForURL() function,\n  // either cached or retreived from the source\n\n  this.loadResolver(onresolver); // `loadResolver()` callback function\n\n  function onresolver(err, FindProxyForURL) {\n    if (err) return fn(err); // calculate the `url` parameter\n\n    var defaultPort = secure ? 443 : 80;\n    var path = req.path;\n    var firstQuestion = path.indexOf('?');\n    var search;\n\n    if (-1 != firstQuestion) {\n      search = path.substring(firstQuestion);\n      path = path.substring(0, firstQuestion);\n    }\n\n    url = format(Object.assign({}, opts, {\n      protocol: secure ? 'https:' : 'http:',\n      pathname: path,\n      search: search,\n      // need to use `hostname` instead of `host` otherwise `port` is ignored\n      hostname: opts.host,\n      host: null,\n      // set `port` to null when it is the protocol default port (80 / 443)\n      port: defaultPort == opts.port ? null : opts.port\n    })); // calculate the `host` parameter\n\n    host = parse(url).hostname;\n    debug('url: %o, host: %o', url, host);\n    FindProxyForURL(url, host, onproxy);\n  } // `FindProxyForURL()` callback function\n\n\n  function onproxy(err, proxy) {\n    if (err) return fn(err); // default to \"DIRECT\" if a falsey value was returned (or nothing)\n\n    if (!proxy) proxy = 'DIRECT';\n    var proxies = String(proxy).trim().split(/\\s*;\\s*/g).filter(Boolean); // XXX: right now, only the first proxy specified will be used\n\n    var first = proxies[0];\n    debug('using proxy: %o', first);\n    var agent;\n    var parts = first.split(/\\s+/);\n    var type = parts[0];\n\n    if ('DIRECT' == type) {\n      // direct connection to the destination endpoint\n      var socket;\n\n      if (secure) {\n        socket = tls.connect(opts);\n      } else {\n        socket = net.connect(opts);\n      }\n\n      return fn(null, socket);\n    } else if ('SOCKS' == type) {\n      // use a SOCKS proxy\n      agent = new SocksProxyAgent('socks://' + parts[1]);\n    } else if ('PROXY' == type || 'HTTPS' == type) {\n      // use an HTTP or HTTPS proxy\n      // http://dev.chromium.org/developers/design-documents/secure-web-proxy\n      var proxyURL = ('HTTPS' === type ? 'https' : 'http') + '://' + parts[1];\n      var proxy = Object.assign({}, self.proxy, parse(proxyURL));\n\n      if (secure) {\n        agent = new HttpsProxyAgent(proxy);\n      } else {\n        agent = new HttpProxyAgent(proxy);\n      }\n    } else {\n      throw new Error('Unknown proxy type: ' + type);\n    }\n\n    if (agent) agent.callback(req, opts, fn);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}