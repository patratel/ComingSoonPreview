{"ast":null,"code":"\"use strict\";\n\n;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar es7_1 = __importDefault(require(\"./es7\"));\n\nvar types_1 = __importDefault(require(\"../lib/types\"));\n\nvar shared_1 = __importDefault(require(\"../lib/shared\"));\n\nfunction default_1(fork) {\n  fork.use(es7_1.default);\n  var types = fork.use(types_1.default);\n  var def = types.Type.def;\n  var or = types.Type.or;\n  var defaults = fork.use(shared_1.default).defaults;\n  def(\"JSXAttribute\").bases(\"Node\").build(\"name\", \"value\").field(\"name\", or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"))).field(\"value\", or(def(\"Literal\"), // attr=\"value\"\n  def(\"JSXExpressionContainer\"), // attr={value}\n  null // attr= or just attr\n  ), defaults[\"null\"]);\n  def(\"JSXIdentifier\").bases(\"Identifier\").build(\"name\").field(\"name\", String);\n  def(\"JSXNamespacedName\").bases(\"Node\").build(\"namespace\", \"name\").field(\"namespace\", def(\"JSXIdentifier\")).field(\"name\", def(\"JSXIdentifier\"));\n  def(\"JSXMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\").field(\"object\", or(def(\"JSXIdentifier\"), def(\"JSXMemberExpression\"))).field(\"property\", def(\"JSXIdentifier\")).field(\"computed\", Boolean, defaults.false);\n  var JSXElementName = or(def(\"JSXIdentifier\"), def(\"JSXNamespacedName\"), def(\"JSXMemberExpression\"));\n  def(\"JSXSpreadAttribute\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  var JSXAttributes = [or(def(\"JSXAttribute\"), def(\"JSXSpreadAttribute\"))];\n  def(\"JSXExpressionContainer\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"JSXElement\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningElement\")).field(\"closingElement\", or(def(\"JSXClosingElement\"), null), defaults[\"null\"]).field(\"children\", [or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n  )], defaults.emptyArray).field(\"name\", JSXElementName, function () {\n    // Little-known fact: the `this` object inside a default function\n    // is none other than the partially-built object itself, and any\n    // fields initialized directly from builder function arguments\n    // (like openingElement, closingElement, and children) are\n    // guaranteed to be available.\n    return this.openingElement.name;\n  }, true) // hidden from traversal\n  .field(\"selfClosing\", Boolean, function () {\n    return this.openingElement.selfClosing;\n  }, true) // hidden from traversal\n  .field(\"attributes\", JSXAttributes, function () {\n    return this.openingElement.attributes;\n  }, true); // hidden from traversal\n\n  def(\"JSXOpeningElement\").bases(\"Node\") // TODO Does this make sense? Can't really be an JSXElement.\n  .build(\"name\", \"attributes\", \"selfClosing\").field(\"name\", JSXElementName).field(\"attributes\", JSXAttributes, defaults.emptyArray).field(\"selfClosing\", Boolean, defaults[\"false\"]);\n  def(\"JSXClosingElement\").bases(\"Node\") // TODO Same concern.\n  .build(\"name\").field(\"name\", JSXElementName);\n  def(\"JSXFragment\").bases(\"Expression\").build(\"openingElement\", \"closingElement\", \"children\").field(\"openingElement\", def(\"JSXOpeningFragment\")).field(\"closingElement\", def(\"JSXClosingFragment\")).field(\"children\", [or(def(\"JSXElement\"), def(\"JSXExpressionContainer\"), def(\"JSXFragment\"), def(\"JSXText\"), def(\"Literal\") // TODO Esprima should return JSXText instead.\n  )], defaults.emptyArray);\n  def(\"JSXOpeningFragment\").bases(\"Node\") // TODO Same concern.\n  .build();\n  def(\"JSXClosingFragment\").bases(\"Node\") // TODO Same concern.\n  .build();\n  def(\"JSXText\").bases(\"Literal\").build(\"value\").field(\"value\", String);\n  def(\"JSXEmptyExpression\").bases(\"Expression\").build(); // This PR has caused many people issues, but supporting it seems like a\n  // good idea anyway: https://github.com/babel/babel/pull/4988\n\n  def(\"JSXSpreadChild\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}