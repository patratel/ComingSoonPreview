{"ast":null,"code":"\"use strict\";\n\n;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __importDefault(require(\"../lib/types\"));\n\nvar shared_1 = __importDefault(require(\"../lib/shared\"));\n\nvar es7_1 = __importDefault(require(\"./es7\"));\n\nfunction default_1(fork) {\n  fork.use(es7_1.default);\n  var types = fork.use(types_1.default);\n  var defaults = fork.use(shared_1.default).defaults;\n  var def = types.Type.def;\n  var or = types.Type.or;\n  def(\"Noop\").bases(\"Statement\").build();\n  def(\"DoExpression\").bases(\"Expression\").build(\"body\").field(\"body\", [def(\"Statement\")]);\n  def(\"Super\").bases(\"Expression\").build();\n  def(\"BindExpression\").bases(\"Expression\").build(\"object\", \"callee\").field(\"object\", or(def(\"Expression\"), null)).field(\"callee\", def(\"Expression\"));\n  def(\"Decorator\").bases(\"Node\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"Property\").field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n  def(\"MethodDefinition\").field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n  def(\"MetaProperty\").bases(\"Expression\").build(\"meta\", \"property\").field(\"meta\", def(\"Identifier\")).field(\"property\", def(\"Identifier\"));\n  def(\"ParenthesizedExpression\").bases(\"Expression\").build(\"expression\").field(\"expression\", def(\"Expression\"));\n  def(\"ImportSpecifier\").bases(\"ModuleSpecifier\").build(\"imported\", \"local\").field(\"imported\", def(\"Identifier\"));\n  def(\"ImportDefaultSpecifier\").bases(\"ModuleSpecifier\").build(\"local\");\n  def(\"ImportNamespaceSpecifier\").bases(\"ModuleSpecifier\").build(\"local\");\n  def(\"ExportDefaultDeclaration\").bases(\"Declaration\").build(\"declaration\").field(\"declaration\", or(def(\"Declaration\"), def(\"Expression\")));\n  def(\"ExportNamedDeclaration\").bases(\"Declaration\").build(\"declaration\", \"specifiers\", \"source\").field(\"declaration\", or(def(\"Declaration\"), null)).field(\"specifiers\", [def(\"ExportSpecifier\")], defaults.emptyArray).field(\"source\", or(def(\"Literal\"), null), defaults[\"null\"]);\n  def(\"ExportSpecifier\").bases(\"ModuleSpecifier\").build(\"local\", \"exported\").field(\"exported\", def(\"Identifier\"));\n  def(\"ExportNamespaceSpecifier\").bases(\"Specifier\").build(\"exported\").field(\"exported\", def(\"Identifier\"));\n  def(\"ExportDefaultSpecifier\").bases(\"Specifier\").build(\"exported\").field(\"exported\", def(\"Identifier\"));\n  def(\"ExportAllDeclaration\").bases(\"Declaration\").build(\"exported\", \"source\").field(\"exported\", or(def(\"Identifier\"), null)).field(\"source\", def(\"Literal\"));\n  def(\"CommentBlock\").bases(\"Comment\").build(\"value\",\n  /*optional:*/\n  \"leading\", \"trailing\");\n  def(\"CommentLine\").bases(\"Comment\").build(\"value\",\n  /*optional:*/\n  \"leading\", \"trailing\");\n  def(\"Directive\").bases(\"Node\").build(\"value\").field(\"value\", def(\"DirectiveLiteral\"));\n  def(\"DirectiveLiteral\").bases(\"Node\", \"Expression\").build(\"value\").field(\"value\", String, defaults[\"use strict\"]);\n  def(\"InterpreterDirective\").bases(\"Node\").build(\"value\").field(\"value\", String);\n  def(\"BlockStatement\").bases(\"Statement\").build(\"body\").field(\"body\", [def(\"Statement\")]).field(\"directives\", [def(\"Directive\")], defaults.emptyArray);\n  def(\"Program\").bases(\"Node\").build(\"body\").field(\"body\", [def(\"Statement\")]).field(\"directives\", [def(\"Directive\")], defaults.emptyArray).field(\"interpreter\", or(def(\"InterpreterDirective\"), null), defaults[\"null\"]); // Split Literal\n\n  def(\"StringLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", String);\n  def(\"NumericLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", Number).field(\"raw\", or(String, null), defaults[\"null\"]).field(\"extra\", {\n    rawValue: Number,\n    raw: String\n  }, function getDefault() {\n    return {\n      rawValue: this.value,\n      raw: this.value + \"\"\n    };\n  });\n  def(\"BigIntLiteral\").bases(\"Literal\").build(\"value\") // Only String really seems appropriate here, since BigInt values\n  // often exceed the limits of JS numbers.\n  .field(\"value\", or(String, Number)).field(\"extra\", {\n    rawValue: String,\n    raw: String\n  }, function getDefault() {\n    return {\n      rawValue: String(this.value),\n      raw: this.value + \"n\"\n    };\n  });\n  def(\"NullLiteral\").bases(\"Literal\").build().field(\"value\", null, defaults[\"null\"]);\n  def(\"BooleanLiteral\").bases(\"Literal\").build(\"value\").field(\"value\", Boolean);\n  def(\"RegExpLiteral\").bases(\"Literal\").build(\"pattern\", \"flags\").field(\"pattern\", String).field(\"flags\", String).field(\"value\", RegExp, function () {\n    return new RegExp(this.pattern, this.flags);\n  });\n  var ObjectExpressionProperty = or(def(\"Property\"), def(\"ObjectMethod\"), def(\"ObjectProperty\"), def(\"SpreadProperty\"), def(\"SpreadElement\")); // Split Property -> ObjectProperty and ObjectMethod\n\n  def(\"ObjectExpression\").bases(\"Expression\").build(\"properties\").field(\"properties\", [ObjectExpressionProperty]); // ObjectMethod hoist .value properties to own properties\n\n  def(\"ObjectMethod\").bases(\"Node\", \"Function\").build(\"kind\", \"key\", \"params\", \"body\", \"computed\").field(\"kind\", or(\"method\", \"get\", \"set\")).field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"params\", [def(\"Pattern\")]).field(\"body\", def(\"BlockStatement\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"generator\", Boolean, defaults[\"false\"]).field(\"async\", Boolean, defaults[\"false\"]).field(\"accessibility\", // TypeScript\n  or(def(\"Literal\"), null), defaults[\"null\"]).field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n  def(\"ObjectProperty\").bases(\"Node\").build(\"key\", \"value\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\"))).field(\"value\", or(def(\"Expression\"), def(\"Pattern\"))).field(\"accessibility\", // TypeScript\n  or(def(\"Literal\"), null), defaults[\"null\"]).field(\"computed\", Boolean, defaults[\"false\"]);\n  var ClassBodyElement = or(def(\"MethodDefinition\"), def(\"VariableDeclarator\"), def(\"ClassPropertyDefinition\"), def(\"ClassProperty\"), def(\"ClassPrivateProperty\"), def(\"ClassMethod\"), def(\"ClassPrivateMethod\")); // MethodDefinition -> ClassMethod\n\n  def(\"ClassBody\").bases(\"Declaration\").build(\"body\").field(\"body\", [ClassBodyElement]);\n  def(\"ClassMethod\").bases(\"Declaration\", \"Function\").build(\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\").field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")));\n  def(\"ClassPrivateMethod\").bases(\"Declaration\", \"Function\").build(\"key\", \"params\", \"body\", \"kind\", \"computed\", \"static\").field(\"key\", def(\"PrivateName\"));\n  [\"ClassMethod\", \"ClassPrivateMethod\"].forEach(function (typeName) {\n    def(typeName).field(\"kind\", or(\"get\", \"set\", \"method\", \"constructor\"), function () {\n      return \"method\";\n    }).field(\"body\", def(\"BlockStatement\")).field(\"computed\", Boolean, defaults[\"false\"]).field(\"static\", or(Boolean, null), defaults[\"null\"]).field(\"abstract\", or(Boolean, null), defaults[\"null\"]).field(\"access\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"]).field(\"accessibility\", or(\"public\", \"private\", \"protected\", null), defaults[\"null\"]).field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]).field(\"optional\", or(Boolean, null), defaults[\"null\"]);\n  });\n  def(\"ClassPrivateProperty\").bases(\"ClassProperty\").build(\"key\", \"value\").field(\"key\", def(\"PrivateName\")).field(\"value\", or(def(\"Expression\"), null), defaults[\"null\"]);\n  def(\"PrivateName\").bases(\"Expression\", \"Pattern\").build(\"id\").field(\"id\", def(\"Identifier\"));\n  var ObjectPatternProperty = or(def(\"Property\"), def(\"PropertyPattern\"), def(\"SpreadPropertyPattern\"), def(\"SpreadProperty\"), // Used by Esprima\n  def(\"ObjectProperty\"), // Babel 6\n  def(\"RestProperty\") // Babel 6\n  ); // Split into RestProperty and SpreadProperty\n\n  def(\"ObjectPattern\").bases(\"Pattern\").build(\"properties\").field(\"properties\", [ObjectPatternProperty]).field(\"decorators\", or([def(\"Decorator\")], null), defaults[\"null\"]);\n  def(\"SpreadProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  def(\"RestProperty\").bases(\"Node\").build(\"argument\").field(\"argument\", def(\"Expression\"));\n  def(\"ForAwaitStatement\").bases(\"Statement\").build(\"left\", \"right\", \"body\").field(\"left\", or(def(\"VariableDeclaration\"), def(\"Expression\"))).field(\"right\", def(\"Expression\")).field(\"body\", def(\"Statement\")); // The callee node of a dynamic import(...) expression.\n\n  def(\"Import\").bases(\"Expression\").build();\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}