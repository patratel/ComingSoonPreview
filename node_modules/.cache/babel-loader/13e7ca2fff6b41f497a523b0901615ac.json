{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar url = require('url');\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar extend = require('extend');\n\nvar NotFoundError = require('./notfound');\n\nvar NotModifiedError = require('./notmodified');\n\nvar debug = require('debug')('get-uri:http');\n/**\n * Module exports.\n */\n\n\nmodule.exports = get;\n/**\n * Returns a Readable stream from an \"http:\" URI.\n *\n * @api protected\n */\n\nfunction get(parsed, opts, fn) {\n  debug('GET %o', parsed.href);\n  var cache = getCache(parsed, opts.cache); // 5 redirects allowed by default\n\n  var maxRedirects = opts.hasOwnProperty('maxRedirects') ? opts.maxRedirects : 5;\n  debug('allowing %o max redirects', maxRedirects); // first check the previous Expires and/or Cache-Control headers\n  // of a previous response if a `cache` was provided\n\n  if (cache && isFresh(cache)) {\n    // check for a 3xx \"redirect\" status code on the previous cache\n    var location = cache.headers.location;\n    var type = cache.statusCode / 100 | 0;\n\n    if (3 == type && location) {\n      debug('cached redirect');\n      fn(new Error('TODO: implement cached redirects!'));\n    } else {\n      // otherwise we assume that it's the destination endpoint,\n      // since there's nowhere else to redirect to\n      fn(new NotModifiedError());\n    }\n\n    return;\n  }\n\n  var mod;\n\n  if (opts.http) {\n    // the `https` module passed in from the \"http.js\" file\n    mod = opts.http;\n    debug('using secure `https` core module');\n  } else {\n    mod = http;\n    debug('using `http` core module');\n  }\n\n  var options = extend({}, opts, parsed); // add \"cache validation\" headers if a `cache` was provided\n\n  if (cache) {\n    if (!options.headers) options.headers = {};\n    var lastModified = cache.headers['last-modified'];\n\n    if (lastModified != null) {\n      options.headers['If-Modified-Since'] = lastModified;\n      debug('added \"If-Modified-Since\" request header: %o', lastModified);\n    }\n\n    var etag = cache.headers.etag;\n\n    if (etag != null) {\n      options.headers['If-None-Match'] = etag;\n      debug('added \"If-None-Match\" request header: %o', etag);\n    }\n  }\n\n  var req = mod.get(options);\n  req.once('error', onerror);\n  req.once('response', onresponse); // http.ClientRequest \"error\" event handler\n\n  function onerror(err) {\n    debug('http.ClientRequest \"error\" event: %o', err.stack || err);\n    fn(err);\n  } // http.ClientRequest \"response\" event handler\n\n\n  function onresponse(res) {\n    var code = res.statusCode; // assign a Date to this response for the \"Cache-Control\" delta calculation\n\n    res.date = new Date();\n    res.parsed = parsed;\n    debug('got %o response status code', code); // any 2xx response is a \"success\" code\n\n    var type = code / 100 | 0; // check for a 3xx \"redirect\" status code\n\n    var location = res.headers.location;\n\n    if (3 == type && location) {\n      if (!opts.redirects) opts.redirects = [];\n      var redirects = opts.redirects;\n\n      if (redirects.length < maxRedirects) {\n        debug('got a \"redirect\" status code with Location: %o', location); // flush this response - we're not going to use it\n\n        res.resume(); // hang on to this Response object for the \"redirects\" Array\n\n        redirects.push(res);\n        var newUri = url.resolve(parsed, location);\n        debug('resolved redirect URL: %o', newUri);\n        var left = maxRedirects - redirects.length;\n        debug('%o more redirects allowed after this one', left); // check if redirecting to a different protocol\n\n        var parsedUrl = url.parse(newUri);\n\n        if (parsedUrl.protocol !== parsed.protocol) {\n          opts.http = parsedUrl.protocol === 'https:' ? https : undefined;\n        }\n\n        return get(parsedUrl, opts, fn);\n      }\n    } // if we didn't get a 2xx \"success\" status code, then create an Error object\n\n\n    if (2 != type) {\n      var err;\n\n      if (304 == code) {\n        err = new NotModifiedError();\n      } else if (404 == code) {\n        err = new NotFoundError();\n      } else {\n        // other HTTP-level error\n        var message = http.STATUS_CODES[code];\n        err = new Error(message);\n        err.statusCode = code;\n        err.code = code;\n      }\n\n      res.resume();\n      return fn(err);\n    }\n\n    if (opts.redirects) {\n      // store a reference to the \"redirects\" Array on the Response object so that\n      // they can be inspected during a subsequent call to GET the same URI\n      res.redirects = opts.redirects;\n    }\n\n    fn(null, res);\n  }\n}\n/**\n * Returns `true` if the provided cache's \"freshness\" is valid. That is, either\n * the Cache-Control header or Expires header values are still within the allowed\n * time period.\n *\n * @return {Boolean}\n * @api private\n */\n\n\nfunction isFresh(cache) {\n  var cacheControl = cache.headers['cache-control'];\n  var expires = cache.headers.expires;\n  var fresh;\n\n  if (cacheControl) {\n    // for Cache-Control rules, see: http://www.mnot.net/cache_docs/#CACHE-CONTROL\n    debug('Cache-Control: %o', cacheControl);\n    var parts = cacheControl.split(/,\\s*?\\b/);\n\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      var subparts = part.split('=');\n      var name = subparts[0];\n\n      switch (name) {\n        case 'max-age':\n          var val = +subparts[1];\n          expires = new Date(+cache.date + val * 1000);\n          fresh = new Date() < expires;\n          if (fresh) debug('cache is \"fresh\" due to previous %o Cache-Control param', part);\n          return fresh;\n\n        case 'must-revalidate':\n          // XXX: what we supposed to do here?\n          break;\n\n        case 'no-cache':\n        case 'no-store':\n          debug('cache is \"stale\" due to explicit %o Cache-Control param', name);\n          return false;\n      }\n    }\n  } else if (expires) {\n    // for Expires rules, see: http://www.mnot.net/cache_docs/#EXPIRES\n    debug('Expires: %o', expires);\n    fresh = new Date() < new Date(expires);\n    if (fresh) debug('cache is \"fresh\" due to previous Expires response header');\n    return fresh;\n  }\n\n  return false;\n}\n/**\n * Attempts to return a previous Response object from a previous GET call to the\n * same URI.\n *\n * @api private\n */\n\n\nfunction getCache(parsed, cache) {\n  if (!cache) return;\n  var href = parsed.href;\n\n  if (cache.parsed.href == href) {\n    return cache;\n  }\n\n  var redirects = cache.redirects;\n\n  if (redirects) {\n    for (var i = 0; i < redirects.length; i++) {\n      var c = getCache(parsed, redirects[i]);\n      if (c) return c;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}