{"ast":null,"code":"import _objectSpread from \"/home/medow/ReactWorkSpace/coming-soon-preview/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/medow/ReactWorkSpace/coming-soon-preview/src/containers/ContactUs/Form/Form.js\";\nimport React, { Component } from 'react';\nimport classes from './Form.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\nimport mailJet from 'node-mailjet';\nimport axios from 'axios';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        company: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Company'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Message'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.sendEmail = email => {\n      let request = require('request');\n\n      let headers = {\n        'Content-Type': 'application/json'\n      };\n      let dataString = {\n        \"Messages\": [{\n          \"From\": {\n            \"Email\": \"$SENDER_EMAIL\",\n            \"Name\": \"Me\"\n          },\n          \"To\": [{\n            \"Email\": \"$RECIPIENT_EMAIL\",\n            \"Name\": \"You\"\n          }],\n          \"Subject\": \"My first Mailjet Email!\",\n          \"TextPart\": \"Greetings from Mailjet!\",\n          \"HTMLPart\": \"<h3>Dear passenger 1, welcome to <a href=\\\"https://www.mailjet.com/\\\">Mailjet</a>!</h3><br />May the delivery force be with you!\"\n        }]\n      };\n      let options = {\n        url: 'https://api.mailjet.com/v3.1/send',\n        method: 'POST',\n        headers: headers,\n        body: dataString,\n        auth: {\n          'user': '0dbdbddda54e1cb73a3f3825a917b8da',\n          'pass': '5ae353f65df7907bafc2bfa75336c94f'\n        }\n      };\n\n      function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n          console.log(body);\n        }\n      }\n\n      request(options, callback);\n    };\n\n    this.contactFormHandler = event => {\n      event.preventDefault();\n      this.sendEmail(this.state.contactForm.email.value);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedContactForm = _objectSpread({}, this.state.contactForm);\n\n      const updatedFormElement = _objectSpread({}, updatedContactForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedContactForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedContactForm) {\n        formIsValid = updatedContactForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        contactForm: updatedContactForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.contactFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })), React.createElement(Button, {\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"SUBMIT\"));\n    return React.createElement(\"div\", {\n      className: classes.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/medow/ReactWorkSpace/coming-soon-preview/src/containers/ContactUs/Form/Form.js"],"names":["React","Component","classes","Input","Button","mailJet","axios","Form","state","contactForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","isEmail","company","message","formIsValid","loading","sendEmail","request","require","headers","dataString","options","url","method","body","auth","callback","error","response","statusCode","console","log","contactFormHandler","event","preventDefault","inputChangedHandler","inputIdentifier","updatedContactForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","minLength","length","maxLength","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement","Container"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classes from './Form.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\nimport mailJet from 'node-mailjet';\nimport axios from 'axios';\n\nclass Form extends Component {\n\n    state = {\n        contactForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            company: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Company'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            message: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Message'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n\n    sendEmail = (email) =>{\n        let request = require('request');\n\n        let headers = {\n            'Content-Type': 'application/json'\n        };\n        \n        let dataString = {\n                \"Messages\":[\n                        {\n                                \"From\": {\n                                        \"Email\": \"$SENDER_EMAIL\",\n                                        \"Name\": \"Me\"\n                                },\n                                \"To\": [\n                                        {\n                                                \"Email\": \"$RECIPIENT_EMAIL\",\n                                                \"Name\": \"You\"\n                                        }\n                                ],\n                                \"Subject\": \"My first Mailjet Email!\",\n                                \"TextPart\": \"Greetings from Mailjet!\",\n                                \"HTMLPart\": \"<h3>Dear passenger 1, welcome to <a href=\\\"https://www.mailjet.com/\\\">Mailjet</a>!</h3><br />May the delivery force be with you!\"\n                        }\n                ]\n            }\n        \n        let options = {\n            url: 'https://api.mailjet.com/v3.1/send',\n            method: 'POST',\n            headers: headers,\n            body: dataString,\n            auth: {\n                'user': '0dbdbddda54e1cb73a3f3825a917b8da',\n                'pass': '5ae353f65df7907bafc2bfa75336c94f'\n            }\n        };\n        \n        function callback(error, response, body) {\n            if (!error && response.statusCode == 200) {\n                console.log(body);\n            }\n        }\n        \n        request(options, callback);\n        \n\n    }\n\n    contactFormHandler = ( event ) => {\n        event.preventDefault();\n        this.sendEmail(this.state.contactForm.email.value);\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedContactForm = {\n            ...this.state.contactForm\n        };\n        const updatedFormElement = { \n            ...updatedContactForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedContactForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedContactForm) {\n            formIsValid = updatedContactForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({contactForm: updatedContactForm, formIsValid: formIsValid});\n    }\n\n   render(){\n        const formElementsArray = [];\n        for (let key in this.state.contactForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.contactForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.contactFormHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button disabled={!this.state.formIsValid}>SUBMIT</Button>\n            </form>\n        );\n        return (\n            <div className={classes.Container}>\n                {form}\n            </div>\n        );\n   }\n}\nexport default Form;"]},"metadata":{},"sourceType":"module"}