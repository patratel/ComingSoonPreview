{"ast":null,"code":"import _objectSpread from \"/home/medow/ReactWorkSpace/coming-soon-preview/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/medow/ReactWorkSpace/coming-soon-preview/src/containers/ContactUs/Form/Form.js\";\nimport React, { Component } from 'react';\nimport classes from './Form.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      contactForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        company: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Company'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        message: {\n          elementType: 'textarea',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Message'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.sendEmail = () => {\n      const mailjet = require('node-mailjet').connect(process.env.MJ_APIKEY_PUBLIC, process.env.MJ_APIKEY_PRIVATE);\n\n      const request = mailjet.post(\"send\", {\n        'version': 'v3.1'\n      }).request({\n        \"Messages\": [{\n          \"From\": {\n            \"Email\": \"cab_lord@yahoo.com\",\n            \"Name\": \"Me\"\n          },\n          \"To\": [{\n            \"Email\": \"$RECIPIENT_EMAIL\",\n            \"Name\": \"You\"\n          }],\n          \"Subject\": \"My first Mailjet Email!\",\n          \"TextPart\": \"Greetings from Mailjet!\",\n          \"HTMLPart\": \"<h3>Dear passenger 1, welcome to <a href=\\\"https://www.mailjet.com/\\\">Mailjet</a>!</h3><br />May the delivery force be with you!\"\n        }]\n      });\n      request.then(result => {\n        console.log(result.body);\n      }).catch(err => {\n        console.log(err.statusCode);\n      });\n    };\n\n    this.contactFormHandler = event => {\n      sendEmail(this.state.contactForm.email.value);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedContactForm = _objectSpread({}, this.state.contactForm);\n\n      const updatedFormElement = _objectSpread({}, updatedContactForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedContactForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedContactForm) {\n        formIsValid = updatedContactForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        contactForm: updatedContactForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.contactForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.contactForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.contactFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"SUBMIT\"));\n    return React.createElement(\"div\", {\n      className: classes.Container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, form);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/medow/ReactWorkSpace/coming-soon-preview/src/containers/ContactUs/Form/Form.js"],"names":["React","Component","classes","Input","Button","Form","state","contactForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","isEmail","company","message","formIsValid","loading","sendEmail","mailjet","require","connect","process","env","MJ_APIKEY_PUBLIC","MJ_APIKEY_PRIVATE","request","post","then","result","console","log","body","catch","err","statusCode","contactFormHandler","event","inputChangedHandler","inputIdentifier","updatedContactForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","minLength","length","maxLength","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement","Container"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport classes from './Form.module.css';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\n\n\nclass Form extends Component {\n\n    state = {\n        contactForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            company: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Company'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            message: {\n                elementType: 'textarea',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Message'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n\n    sendEmail = () =>{\n        const mailjet = require ('node-mailjet')\n            .connect(process.env.MJ_APIKEY_PUBLIC, process.env.MJ_APIKEY_PRIVATE)\n        const request = mailjet\n            .post(\"send\", {'version': 'v3.1'})\n            .request({\n                \"Messages\":[\n                        {\n                                \"From\": {\n                                        \"Email\": \"cab_lord@yahoo.com\",\n                                        \"Name\": \"Me\"\n                                },\n                                \"To\": [\n                                        {\n                                                \"Email\": \"$RECIPIENT_EMAIL\",\n                                                \"Name\": \"You\"\n                                        }\n                                ],\n                                \"Subject\": \"My first Mailjet Email!\",\n                                \"TextPart\": \"Greetings from Mailjet!\",\n                                \"HTMLPart\": \"<h3>Dear passenger 1, welcome to <a href=\\\"https://www.mailjet.com/\\\">Mailjet</a>!</h3><br />May the delivery force be with you!\"\n                        }\n                ]\n            })\n        request\n            .then((result) => {\n                console.log(result.body)\n            })\n            .catch((err) => {\n                console.log(err.statusCode)\n            })\n    }\n    contactFormHandler = ( event ) => {\n        sendEmail(this.state.contactForm.email.value);\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedContactForm = {\n            ...this.state.contactForm\n        };\n        const updatedFormElement = { \n            ...updatedContactForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedContactForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedContactForm) {\n            formIsValid = updatedContactForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({contactForm: updatedContactForm, formIsValid: formIsValid});\n    }\n\n   render(){\n        const formElementsArray = [];\n        for (let key in this.state.contactForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.contactForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.contactFormHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>SUBMIT</Button>\n            </form>\n        );\n        return (\n            <div className={classes.Container}>\n                {form}\n            </div>\n        );\n   }\n}\nexport default Form;"]},"metadata":{},"sourceType":"module"}