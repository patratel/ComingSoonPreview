{"ast":null,"code":"/**\n * Module exports.\n */\nmodule.exports = weekdayRange;\n/**\n * Only the first parameter is mandatory. Either the second, the third, or both\n * may be left out.\n *\n * If only one parameter is present, the function yeilds a true value on the\n * weekday that the parameter represents. If the string \"GMT\" is specified as\n * a second parameter, times are taken to be in GMT, otherwise in local timezone.\n *\n * If both wd1 and wd1 are defined, the condition is true if the current weekday\n * is in between those two weekdays. Bounds are inclusive. If the \"GMT\" parameter\n * is specified, times are taken to be in GMT, otherwise the local timezone is\n * used.\n *\n * Valid \"weekday strings\" are:\n *\n *     SUN MON TUE WED THU FRI SAT\n *\n * Examples:\n *\n * ``` js\n * weekdayRange(\"MON\", \"FRI\")\n * true Monday trhough Friday (local timezone).\n *\n * weekdayRange(\"MON\", \"FRI\", \"GMT\")\n * same as above, but GMT timezone.\n *\n * weekdayRange(\"SAT\")\n * true on Saturdays local time.\n *\n * weekdayRange(\"SAT\", \"GMT\")\n * true on Saturdays GMT time.\n *\n * weekdayRange(\"FRI\", \"MON\")\n * true Friday through Monday (note, order does matter!).\n * ```\n *\n * \n * @param {String} wd1 one of the weekday strings.\n * @param {String} wd2 one of the weekday strings.\n * @param {String} gmt is either the string: GMT or is left out.\n * @return {Boolean}\n */\n\nconst dayOrder = {\n  \"SUN\": 0,\n  \"MON\": 1,\n  \"TUE\": 2,\n  \"WED\": 3,\n  \"THU\": 4,\n  \"FRI\": 5,\n  \"SAT\": 6\n};\n\nfunction weekdayRange(wd1, wd2, gmt) {\n  var useGMTzone = wd2 == \"GMT\" || gmt == \"GMT\",\n      todaysDay = getTodaysDay(useGMTzone),\n      wd1Index = dayOrder[wd1] || -1,\n      wd2Index = dayOrder[wd2] || -1,\n      result = false;\n\n  if (wd2Index < 0) {\n    result = todaysDay == wd1Index;\n  } else {\n    if (wd1Index <= wd2Index) {\n      result = valueInRange(wd1Index, todaysDay, wd2Index);\n    } else {\n      result = valueInRange(wd1Index, todaysDay, 6) || valueInRange(0, todaysDay, wd2Index);\n    }\n  }\n\n  return result;\n}\n\nfunction getTodaysDay(gmt) {\n  return gmt ? new Date().getUTCDay() : new Date().getDay();\n} // start <= value <= finish\n\n\nfunction valueInRange(start, value, finish) {\n  return start <= value && value <= finish;\n}","map":null,"metadata":{},"sourceType":"script"}