{"ast":null,"code":"var WritableStream = require('stream').Writable || require('readable-stream').Writable,\n    inherits = require('util').inherits,\n    inspect = require('util').inspect;\n\nvar XRegExp = require('xregexp').XRegExp;\n\nvar REX_LISTUNIX = XRegExp.cache('^(?<type>[\\\\-ld])(?<permission>([\\\\-r][\\\\-w][\\\\-xstT]){3})(?<acl>(\\\\+))?\\\\s+(?<inodes>\\\\d+)\\\\s+(?<owner>\\\\S+)\\\\s+(?<group>\\\\S+)\\\\s+(?<size>\\\\d+)\\\\s+(?<timestamp>((?<month1>\\\\w{3})\\\\s+(?<date1>\\\\d{1,2})\\\\s+(?<hour>\\\\d{1,2}):(?<minute>\\\\d{2}))|((?<month2>\\\\w{3})\\\\s+(?<date2>\\\\d{1,2})\\\\s+(?<year>\\\\d{4})))\\\\s+(?<name>.+)$'),\n    REX_LISTMSDOS = XRegExp.cache('^(?<month>\\\\d{2})(?:\\\\-|\\\\/)(?<date>\\\\d{2})(?:\\\\-|\\\\/)(?<year>\\\\d{2,4})\\\\s+(?<hour>\\\\d{2}):(?<minute>\\\\d{2})\\\\s{0,1}(?<ampm>[AaMmPp]{1,2})\\\\s+(?:(?<size>\\\\d+)|(?<isdir>\\\\<DIR\\\\>))\\\\s+(?<name>.+)$'),\n    RE_ENTRY_TOTAL = /^total/,\n    RE_RES_END = /(?:^|\\r?\\n)(\\d{3}) [^\\r\\n]*\\r?\\n/,\n    RE_EOL = /\\r?\\n/g,\n    RE_DASH = /\\-/g;\nvar MONTHS = {\n  jan: 1,\n  feb: 2,\n  mar: 3,\n  apr: 4,\n  may: 5,\n  jun: 6,\n  jul: 7,\n  aug: 8,\n  sep: 9,\n  oct: 10,\n  nov: 11,\n  dec: 12\n};\n\nfunction Parser(options) {\n  if (!(this instanceof Parser)) return new Parser(options);\n  WritableStream.call(this);\n  this._buffer = '';\n  this._debug = options.debug;\n}\n\ninherits(Parser, WritableStream);\n\nParser.prototype._write = function (chunk, encoding, cb) {\n  var m,\n      code,\n      reRmLeadCode,\n      rest = '',\n      debug = this._debug;\n  this._buffer += chunk.toString('binary');\n\n  while (m = RE_RES_END.exec(this._buffer)) {\n    // support multiple terminating responses in the buffer\n    rest = this._buffer.substring(m.index + m[0].length);\n    if (rest.length) this._buffer = this._buffer.substring(0, m.index + m[0].length);\n    debug && debug('[parser] < ' + inspect(this._buffer)); // we have a terminating response line\n\n    code = parseInt(m[1], 10); // RFC 959 does not require each line in a multi-line response to begin\n    // with '<code>-', but many servers will do this.\n    //\n    // remove this leading '<code>-' (or '<code> ' from last line) from each\n    // line in the response ...\n\n    reRmLeadCode = '(^|\\\\r?\\\\n)';\n    reRmLeadCode += m[1];\n    reRmLeadCode += '(?: |\\\\-)';\n    reRmLeadCode = new RegExp(reRmLeadCode, 'g');\n\n    var text = this._buffer.replace(reRmLeadCode, '$1').trim();\n\n    this._buffer = rest;\n    debug && debug('[parser] Response: code=' + code + ', buffer=' + inspect(text));\n    this.emit('response', code, text);\n  }\n\n  cb();\n};\n\nParser.parseFeat = function (text) {\n  var lines = text.split(RE_EOL);\n  lines.shift(); // initial response line\n\n  lines.pop(); // final response line\n\n  for (var i = 0, len = lines.length; i < len; ++i) lines[i] = lines[i].trim(); // just return the raw lines for now\n\n\n  return lines;\n};\n\nParser.parseListEntry = function (line) {\n  var ret, info, month, day, year, hour, mins;\n\n  if (ret = XRegExp.exec(line, REX_LISTUNIX)) {\n    info = {\n      type: ret.type,\n      name: undefined,\n      target: undefined,\n      sticky: false,\n      rights: {\n        user: ret.permission.substr(0, 3).replace(RE_DASH, ''),\n        group: ret.permission.substr(3, 3).replace(RE_DASH, ''),\n        other: ret.permission.substr(6, 3).replace(RE_DASH, '')\n      },\n      acl: ret.acl === '+',\n      owner: ret.owner,\n      group: ret.group,\n      size: parseInt(ret.size, 10),\n      date: undefined\n    }; // check for sticky bit\n\n    var lastbit = info.rights.other.slice(-1);\n\n    if (lastbit === 't') {\n      info.rights.other = info.rights.other.slice(0, -1) + 'x';\n      info.sticky = true;\n    } else if (lastbit === 'T') {\n      info.rights.other = info.rights.other.slice(0, -1);\n      info.sticky = true;\n    }\n\n    if (ret.month1 !== undefined) {\n      month = parseInt(MONTHS[ret.month1.toLowerCase()], 10);\n      day = parseInt(ret.date1, 10);\n      year = new Date().getFullYear();\n      hour = parseInt(ret.hour, 10);\n      mins = parseInt(ret.minute, 10);\n      if (month < 10) month = '0' + month;\n      if (day < 10) day = '0' + day;\n      if (hour < 10) hour = '0' + hour;\n      if (mins < 10) mins = '0' + mins;\n      info.date = new Date(year + '-' + month + '-' + day + 'T' + hour + ':' + mins); // If the date is in the past but no more than 6 months old, year\n      // isn't displayed and doesn't have to be the current year.\n      // \n      // If the date is in the future (less than an hour from now), year\n      // isn't displayed and doesn't have to be the current year.\n      // That second case is much more rare than the first and less annoying.\n      // It's impossible to fix without knowing about the server's timezone,\n      // so we just don't do anything about it.\n      // \n      // If we're here with a time that is more than 28 hours into the\n      // future (1 hour + maximum timezone offset which is 27 hours),\n      // there is a problem -- we should be in the second conditional block\n\n      if (info.date.getTime() - Date.now() > 100800000) {\n        info.date = new Date(year - 1 + '-' + month + '-' + day + 'T' + hour + ':' + mins);\n      } // If we're here with a time that is more than 6 months old, there's\n      // a problem as well.\n      // Maybe local & remote servers aren't on the same timezone (with remote\n      // ahead of local)\n      // For instance, remote is in 2014 while local is still in 2013. In\n      // this case, a date like 01/01/13 02:23 could be detected instead of\n      // 01/01/14 02:23 \n      // Our trigger point will be 3600*24*31*6 (since we already use 31\n      // as an upper bound, no need to add the 27 hours timezone offset)\n\n\n      if (Date.now() - info.date.getTime() > 16070400000) {\n        info.date = new Date(year + 1 + '-' + month + '-' + day + 'T' + hour + ':' + mins);\n      }\n    } else if (ret.month2 !== undefined) {\n      month = parseInt(MONTHS[ret.month2.toLowerCase()], 10);\n      day = parseInt(ret.date2, 10);\n      year = parseInt(ret.year, 10);\n      if (month < 10) month = '0' + month;\n      if (day < 10) day = '0' + day;\n      info.date = new Date(year + '-' + month + '-' + day);\n    }\n\n    if (ret.type === 'l') {\n      var pos = ret.name.indexOf(' -> ');\n      info.name = ret.name.substring(0, pos);\n      info.target = ret.name.substring(pos + 4);\n    } else info.name = ret.name;\n\n    ret = info;\n  } else if (ret = XRegExp.exec(line, REX_LISTMSDOS)) {\n    info = {\n      name: ret.name,\n      type: ret.isdir ? 'd' : '-',\n      size: ret.isdir ? 0 : parseInt(ret.size, 10),\n      date: undefined\n    };\n    month = parseInt(ret.month, 10), day = parseInt(ret.date, 10), year = parseInt(ret.year, 10), hour = parseInt(ret.hour, 10), mins = parseInt(ret.minute, 10);\n    if (year < 70) year += 2000;else year += 1900;\n    if (ret.ampm[0].toLowerCase() === 'p' && hour < 12) hour += 12;else if (ret.ampm[0].toLowerCase() === 'a' && hour === 12) hour = 0;\n    info.date = new Date(year, month - 1, day, hour, mins);\n    ret = info;\n  } else if (!RE_ENTRY_TOTAL.test(line)) ret = line; // could not parse, so at least give the end user a chance to\n  // look at the raw listing themselves\n\n\n  return ret;\n};\n\nmodule.exports = Parser;","map":null,"metadata":{},"sourceType":"script"}