{"ast":null,"code":"\"use strict\";\n\n;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar types_1 = __importDefault(require(\"../lib/types\"));\n\nvar shared_1 = __importDefault(require(\"../lib/shared\"));\n\nvar core_1 = __importDefault(require(\"./core\"));\n\nfunction default_1(fork) {\n  fork.use(core_1.default);\n  var types = fork.use(types_1.default);\n  var Type = types.Type;\n  var def = types.Type.def;\n  var or = Type.or;\n  var shared = fork.use(shared_1.default);\n  var defaults = shared.defaults; // https://github.com/tc39/proposal-optional-chaining\n  // `a?.b` as per https://github.com/estree/estree/issues/146\n\n  def(\"OptionalMemberExpression\").bases(\"MemberExpression\").build(\"object\", \"property\", \"computed\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]); // a?.b()\n\n  def(\"OptionalCallExpression\").bases(\"CallExpression\").build(\"callee\", \"arguments\", \"optional\").field(\"optional\", Boolean, defaults[\"true\"]); // https://github.com/tc39/proposal-nullish-coalescing\n  // `a ?? b` as per https://github.com/babel/babylon/pull/761/files\n\n  var LogicalOperator = or(\"||\", \"&&\", \"??\");\n  def(\"LogicalExpression\").field(\"operator\", LogicalOperator);\n}\n\nexports.default = default_1;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}