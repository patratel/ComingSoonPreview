{"ast":null,"code":"var net = require('net');\n\nvar ip = require('ip');\n\nvar SmartBuffer = require('smart-buffer');\n\n(function () {\n  var COMMAND = {\n    Connect: 0x01,\n    Bind: 0x02,\n    Associate: 0x03\n  };\n  var SOCKS4_RESPONSE = {\n    Granted: 0x5A,\n    Failed: 0x5B,\n    Rejected: 0x5C,\n    RejectedIdent: 0x5D\n  };\n  var SOCKS5_AUTH = {\n    NoAuth: 0x00,\n    GSSApi: 0x01,\n    UserPass: 0x02\n  };\n  var SOCKS5_RESPONSE = {\n    Granted: 0x00,\n    Failure: 0x01,\n    NotAllowed: 0x02,\n    NetworkUnreachable: 0x03,\n    HostUnreachable: 0x04,\n    ConnectionRefused: 0x05,\n    TTLExpired: 0x06,\n    CommandNotSupported: 0x07,\n    AddressNotSupported: 0x08\n  };\n\n  exports.createConnection = function (options, callback) {\n    var socket = new net.Socket(),\n        finished = false,\n        buff = new SmartBuffer(); // Defaults\n\n    options.timeout = options.timeout || 10000;\n    options.proxy.command = commandFromString(options.proxy.command);\n    options.proxy.userid = options.proxy.userid || \"\";\n    var auth = options.proxy.authentication || {};\n    auth.username = auth.username || \"\";\n    auth.password = auth.password || \"\";\n    options.proxy.authentication = auth; // Connect & negotiation timeout\n\n    function onTimeout() {\n      finish(new Error(\"Connection Timed Out\"), socket, null, callback);\n    }\n\n    socket.setTimeout(options.timeout, onTimeout); // Socket events\n\n    socket.once('close', function () {\n      finish(new Error(\"Socket Closed\"), socket, null, callback);\n    });\n    socket.once('error', function (err) {});\n    socket.once('connect', function () {\n      if (options.proxy.type === 4) {\n        negotiateSocks4(options, socket, callback);\n      } else if (options.proxy.type === 5) {\n        negotiateSocks5(options, socket, callback);\n      } else {\n        throw new Error(\"Please specify a proxy type in options.proxy.type\");\n      }\n    });\n    socket.connect(options.proxy.port, options.proxy.ipaddress); // 4/4a  (connect, bind) - Supports domains & ipaddress\n\n    function negotiateSocks4(options, socket, callback) {\n      buff.writeUInt8(0x04);\n      buff.writeUInt8(options.proxy.command);\n      buff.writeUInt16BE(options.target.port); // ipv4 or domain?\n\n      if (net.isIPv4(options.target.host)) {\n        buff.writeBuffer(ip.toBuffer(options.target.host));\n        buff.writeStringNT(options.proxy.userid);\n      } else {\n        buff.writeUInt8(0x00);\n        buff.writeUInt8(0x00);\n        buff.writeUInt8(0x00);\n        buff.writeUInt8(0x01);\n        buff.writeStringNT(options.proxy.userid);\n        buff.writeStringNT(options.target.host);\n      }\n\n      socket.once('data', receivedResponse);\n      socket.write(buff.toBuffer());\n\n      function receivedResponse(data) {\n        socket.pause();\n\n        if (data.length === 8 && data[1] === SOCKS4_RESPONSE.Granted) {\n          if (options.proxy.command === COMMAND.Bind) {\n            buff.clear();\n            buff.writeBuffer(data);\n            buff.skip(2);\n            var info = {\n              port: buff.readUInt16BE(),\n              host: buff.readUInt32BE()\n            };\n\n            if (info.host === 0) {\n              info.host = options.proxy.ipaddress;\n            } else {\n              info.host = ip.fromLong(info.host);\n            }\n\n            finish(null, socket, info, callback);\n          } else {\n            finish(null, socket, null, callback);\n          }\n        } else {\n          finish(new Error(\"Rejected (\" + data[1] + \")\"), socket, null, callback);\n        }\n      }\n    } // Socks 5 (connect, bind, associate) - Supports domains and ipv4, ipv6.\n\n\n    function negotiateSocks5(options, socket, callback) {\n      buff.writeUInt8(0x05);\n      buff.writeUInt8(2);\n      buff.writeUInt8(SOCKS5_AUTH.NoAuth);\n      buff.writeUInt8(SOCKS5_AUTH.UserPass);\n      socket.once('data', handshake);\n      socket.write(buff.toBuffer());\n\n      function handshake(data) {\n        if (data.length !== 2) {\n          finish(new Error(\"Negotiation Error\"), socket, null, callback);\n        } else if (data[0] !== 0x05) {\n          finish(new Error(\"Negotiation Error (invalid version)\"), socket, null, callback);\n        } else if (data[1] === 0xFF) {\n          finish(new Error(\"Negotiation Error (unacceptable authentication)\"), socket, null, callback);\n        } else {\n          if (data[1] === SOCKS5_AUTH.NoAuth) {\n            sendRequest();\n          } else if (data[1] === SOCKS5_AUTH.UserPass) {\n            sendAuthentication(options.proxy.authentication);\n          } else {\n            finish(new Error(\"Negotiation Error (unknown authentication type)\"), socket, null, callback);\n          }\n        }\n      }\n\n      function sendAuthentication(authinfo) {\n        buff.clear();\n        buff.writeUInt8(0x01);\n        buff.writeUInt8(Buffer.byteLength(authinfo.username));\n        buff.writeString(authinfo.username);\n        buff.writeUInt8(Buffer.byteLength(authinfo.password));\n        buff.writeString(authinfo.password);\n        socket.once('data', authenticationResponse);\n        socket.write(buff.toBuffer());\n\n        function authenticationResponse(data) {\n          if (data.length === 2 && data[1] === 0x00) {\n            sendRequest();\n          } else {\n            finish(new Error(\"Negotiation Error (authentication failed)\"), socket, null, callback);\n          }\n        }\n      }\n\n      function sendRequest() {\n        buff.clear();\n        buff.writeUInt8(0x05);\n        buff.writeUInt8(options.proxy.command);\n        buff.writeUInt8(0x00); // ipv4, ipv6, domain?\n\n        if (net.isIPv4(options.target.host)) {\n          buff.writeUInt8(0x01);\n          buff.writeBuffer(ip.toBuffer(options.target.host));\n        } else if (net.isIPv6(options.target.host)) {\n          buff.writeUInt8(0x04);\n          buff.writeBuffer(ip.toBuffer(options.target.host));\n        } else {\n          buff.writeUInt8(0x03);\n          buff.writeUInt8(options.target.host.length);\n          buff.writeString(options.target.host);\n        }\n\n        buff.writeUInt16BE(options.target.port);\n        socket.once('data', receivedResponse);\n        socket.write(buff.toBuffer());\n      }\n\n      function receivedResponse(data) {\n        socket.pause();\n\n        if (data.length < 4) {\n          finish(new Error(\"Negotiation Error\"), socket, null, callback);\n        } else if (data[0] === 0x05 && data[1] === SOCKS5_RESPONSE.Granted) {\n          if (options.proxy.command === COMMAND.Connect) {\n            finish(null, socket, null, callback);\n          } else if (options.proxy.command === COMMAND.Bind || options.proxy.command === COMMAND.Associate) {\n            buff.clear();\n            buff.writeBuffer(data);\n            buff.skip(3);\n            var info = {};\n            var addrtype = buff.readUInt8();\n\n            try {\n              if (addrtype === 0x01) {\n                info.host = buff.readUInt32BE();\n                if (info.host === 0) info.host = options.proxy.ipaddress;else info.host = ip.fromLong(info.host);\n              } else if (addrtype === 0x03) {\n                var len = buff.readUInt8();\n                info.host = buff.readString(len);\n              } else if (addrtype === 0x04) {\n                info.host = buff.readBuffer(16);\n              } else {\n                finish(new Error(\"Negotiation Error (invalid host address)\"), socket, null, callback);\n              }\n\n              info.port = buff.readUInt16BE();\n              finish(null, socket, info, callback);\n            } catch (ex) {\n              finish(new Error(\"Negotiation Error (missing data)\"), socket, null, callback);\n            }\n          }\n        } else {\n          finish(new Error(\"Negotiation Error (\" + data[1] + \")\"), socket, null, callback);\n        }\n      }\n    }\n\n    function finish(err, socket, info, callback) {\n      socket.setTimeout(0, onTimeout);\n\n      if (!finished) {\n        finished = true;\n        if (buff instanceof SmartBuffer) buff.destroy();\n\n        if (err && socket instanceof net.Socket) {\n          socket.removeAllListeners('close');\n          socket.removeAllListeners('timeout');\n          socket.removeAllListeners('data');\n          socket.destroy();\n          socket = null;\n        }\n\n        callback(err, socket, info);\n      }\n    }\n\n    function commandFromString(str) {\n      var result = COMMAND.Connect;\n\n      if (str === \"connect\") {\n        result = COMMAND.Connect;\n      } else if (str === 'associate') {\n        result = COMMAND.Associate;\n      } else if (str === 'bind') {\n        result = COMMAND.Bind;\n      }\n\n      return result;\n    }\n  };\n\n  exports.createUDPFrame = function (target, data, frame) {\n    var buff = new SmartBuffer();\n    buff.writeUInt16BE(0);\n    buff.writeUInt8(frame || 0x00);\n\n    if (net.isIPv4(target.host)) {\n      buff.writeUInt8(0x01);\n      buff.writeUInt32BE(ip.toLong(target.host));\n    } else if (net.isIPv6(target.host)) {\n      buff.writeUInt8(0x04);\n      buff.writeBuffer(ip.toBuffer(target.host));\n    } else {\n      buff.writeUInt8(0x03);\n      buff.writeUInt8(Buffer.byteLength(target.host));\n      buff.writeString(target.host);\n    }\n\n    buff.writeUInt16BE(target.port);\n    buff.writeBuffer(data);\n    return buff.toBuffer();\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}