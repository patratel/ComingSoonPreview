{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar fs = require('fs');\n\nvar uri2path = require('file-uri-to-path');\n\nvar NotFoundError = require('./notfound');\n\nvar NotModifiedError = require('./notmodified');\n\nvar debug = require('debug')('get-uri:file');\n/**\n * Module exports.\n */\n\n\nmodule.exports = get;\n/**\n * Returns a `fs.ReadStream` instance from a \"file:\" URI.\n *\n * @api protected\n */\n\nfunction get(parsed, opts, fn) {\n  var fd;\n  var cache = opts.cache; // same as in fs.ReadStream's constructor\n\n  var flags = opts.hasOwnProperty('flags') ? options.flags : 'r';\n  var mode = opts.hasOwnProperty('mode') ? options.mode : 438;\n  /*=0666*/\n  // convert URI â†’ Path\n\n  var uri = parsed.href;\n  var filepath = uri2path(uri);\n  debug('normalized pathname: %o', filepath); // open() first to get a fd and ensure that the file exists\n\n  fs.open(filepath, flags, mode, onopen);\n\n  function onerror(err) {\n    if ('number' == typeof fd) {\n      fs.close(fd, onclose);\n    }\n\n    fn(err);\n  }\n\n  function onclose() {\n    debug('closed fd %o', fd);\n  }\n\n  function onopen(err, _fd) {\n    if (err) {\n      if ('ENOENT' == err.code) {\n        err = new NotFoundError();\n      }\n\n      return onerror(err);\n    }\n\n    fd = _fd; // now fstat() to check the `mtime` and store the stat object for the cache\n\n    fs.fstat(fd, onstat);\n  }\n\n  function onstat(err, stat) {\n    if (err) return onerror(err); // if a `cache` was provided, check if the file has not been modified\n\n    if (cache && cache.stat && stat && isNotModified(cache.stat, stat)) {\n      return onerror(new NotModifiedError());\n    } // `fs.ReadStream` takes care of calling `fs.close()` on the\n    // fd after it's done reading\n\n\n    opts.fd = fd;\n    var rs = fs.createReadStream(null, opts);\n    rs.stat = stat;\n    fn(null, rs);\n  } // returns `true` if the `mtime` of the 2 stat objects are equal\n\n\n  function isNotModified(prev, curr) {\n    return +prev.mtime == +curr.mtime;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}