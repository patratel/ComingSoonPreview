{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar proxyAgent = require('proxy-agent');\n\nvar debug = require('debug')('superagent-proxy');\n/**\n * Module exports.\n */\n\n\nmodule.exports = setup;\n/**\n * Adds a `.proxy(uri)` function to the \"superagent\" module's Request class.\n *\n * ``` js\n * var request = require('superagent');\n * require('superagent-proxy')(request);\n *\n * request\n *   .get(uri)\n *   .proxy(uri)\n *   .end(fn);\n * ```\n *\n * Or, you can pass in a `superagent.Request` instance, and it's like calling the\n * `.proxy(uri)` function on it, but without extending the prototype:\n *\n * ``` js\n * var request = require('superagent');\n * var proxy = require('superagent-proxy');\n *\n * proxy(request.get(uri), uri).end(fn);\n * ```\n *\n * @param {Object} superagent The `superagent` exports object\n * @api public\n */\n\nfunction setup(superagent, uri) {\n  var Request = superagent.Request;\n\n  if (Request) {\n    // the superagent exports object - extent Request with \"proxy\"\n    Request.prototype.proxy = proxy;\n    return superagent;\n  } else {\n    // assume it's a `superagent.Request` instance\n    return proxy.call(superagent, uri);\n  }\n}\n/**\n * Sets the proxy server to use for this HTTP(s) request.\n *\n * @param {String} uri proxy url\n * @api public\n */\n\n\nfunction proxy(uri) {\n  debug('Request#proxy(%o)', uri); // we need to observe the `url` field from now on... Superagent sometimes\n  // re-uses the `req` instance but changes its `url` field (i.e. in the case of\n  // a redirect), so when that happens we need to potentially re-set the proxy\n  // agent\n\n  setupUrl(this); // attempt to get a proxying `http.Agent` instance\n\n  var agent = proxyAgent(uri); // if we have an `http.Agent` instance then call the .agent() function\n\n  if (agent) this.agent(agent); // store the proxy URI in case of changes to the `url` prop in the future\n\n  this._proxyUri = uri;\n  return this;\n}\n/**\n * Sets up a get/set descriptor for the `url` property of the provided `req`\n * Request instance. This is so that we can re-run the \"proxy agent\" logic when\n * the `url` field is changed, i.e. during a 302 Redirect scenario.\n *\n * @api private\n */\n\n\nfunction setupUrl(req) {\n  var desc = Object.getOwnPropertyDescriptor(req, 'url');\n  if (desc.get == getUrl && desc.set == setUrl) return; // already patched\n  // save current value\n\n  req._url = req.url;\n  desc.get = getUrl;\n  desc.set = setUrl;\n  delete desc.value;\n  delete desc.writable;\n  Object.defineProperty(req, 'url', desc);\n  debug('patched superagent Request \"url\" property for changes');\n}\n/**\n * `url` property getter.\n *\n * @api protected\n */\n\n\nfunction getUrl() {\n  return this._url;\n}\n/**\n * `url` property setter.\n *\n * @api protected\n */\n\n\nfunction setUrl(v) {\n  debug('set `.url`: %o', v);\n  this._url = v;\n  proxy.call(this, this._proxyUri);\n}","map":null,"metadata":{},"sourceType":"script"}