{"ast":null,"code":"var tls = require('tls');\n\nvar inherits = require('util').inherits;\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar SocksClient = require('./socks-client.js');\n\nfunction SocksAgent(options, secure, rejectUnauthorized) {\n  this.options = options;\n  this.secure = secure || false;\n  this.rejectUnauthorized = rejectUnauthorized;\n\n  if (this.rejectUnauthorized === undefined) {\n    this.rejectUnauthorized = true;\n  }\n}\n\ninherits(SocksAgent, EventEmitter);\n\nSocksAgent.prototype.createConnection = function (req, opts, fn) {\n  var handler = fn,\n      host,\n      self = this;\n  this.options.target = this.options.target || {};\n\n  if (!this.options.target.host) {\n    this.options.target.host = opts.host;\n  }\n\n  if (!this.options.target.port) {\n    this.options.target.port = opts.port;\n  }\n\n  host = this.options.target.host;\n\n  if (this.secure) {\n    handler = function (err, socket, info) {\n      var options, cleartext;\n\n      if (err) {\n        return fn(err);\n      } // save encrypted socket\n\n\n      self.encryptedSocket = socket;\n      options = {\n        socket: socket,\n        servername: host,\n        rejectUnauthorized: self.rejectUnauthorized\n      };\n      cleartext = tls.connect(options, function (err) {\n        return fn(err, this);\n      });\n      cleartext.on('error', fn);\n      socket.resume();\n    };\n  }\n\n  SocksClient.createConnection(this.options, handler);\n};\n/**\n * @see https://www.npmjs.com/package/agent-base\n */\n\n\nSocksAgent.prototype.addRequest = function (req, host, port, localAddress) {\n  var opts;\n\n  if ('object' === typeof host) {\n    // >= v0.11.x API\n    opts = host;\n\n    if (opts.host && opts.path) {\n      // if both a `host` and `path` are specified then it's most likely the\n      // result of a `url.parse()` call... we need to remove the `path` portion so\n      // that `net.connect()` doesn't attempt to open that as a unix socket file.\n      delete opts.path;\n    }\n  } else {\n    // <= v0.10.x API\n    opts = {\n      host: host,\n      port: port\n    };\n\n    if (null !== localAddress) {\n      opts.localAddress = localAddress;\n    }\n  }\n\n  var sync = true;\n  this.createConnection(req, opts, function (err, socket) {\n    function emitErr() {\n      req.emit('error', err);\n    }\n\n    if (err) {\n      if (sync) {\n        // need to defer the \"error\" event, when sync, because by now the `req`\n        // instance hasn't event been passed back to the user yet...\n        process.nextTick(emitErr);\n      } else {\n        emitErr();\n      }\n    } else {\n      req.onSocket(socket); //have to resume this socket when node 12\n\n      socket.resume();\n    }\n  });\n  sync = false;\n};\n\nexports.Agent = SocksAgent;","map":null,"metadata":{},"sourceType":"script"}